"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateExistingFiles = migrateExistingFiles;
const fileEncryption_1 = require("../lib/fileEncryption");
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
/**
 * Script para migrar arquivos existentes para o formato criptografado
 */
async function migrateExistingFiles() {
    try {
        console.log('üîÑ Iniciando migra√ß√£o de arquivos para criptografia...');
        const uploadsDir = path_1.default.join(__dirname, '../../uploads');
        // Verificar se o diret√≥rio de uploads existe
        try {
            await promises_1.default.access(uploadsDir);
        }
        catch {
            console.log('‚ùå Diret√≥rio de uploads n√£o encontrado');
            return;
        }
        // Listar todos os arquivos no diret√≥rio de uploads
        const files = await promises_1.default.readdir(uploadsDir);
        const filesToEncrypt = files.filter(file => !file.endsWith('.encrypted') &&
            !file.endsWith('.temp') &&
            !file.startsWith('.'));
        if (filesToEncrypt.length === 0) {
            console.log('‚úÖ Nenhum arquivo para migrar encontrado');
            return;
        }
        console.log(`üìÅ Encontrados ${filesToEncrypt.length} arquivos para migrar:`);
        filesToEncrypt.forEach(file => console.log(`  - ${file}`));
        let successCount = 0;
        let errorCount = 0;
        for (const file of filesToEncrypt) {
            try {
                const originalPath = path_1.default.join(uploadsDir, file);
                const encryptedPath = originalPath + '.encrypted';
                console.log(`üîê Criptografando: ${file}`);
                // Criptografar o arquivo
                await fileEncryption_1.FileEncryption.encryptFile(originalPath, encryptedPath, fileEncryption_1.FileEncryption.getEncryptionPassword());
                // Remover arquivo original
                await promises_1.default.unlink(originalPath);
                console.log(`‚úÖ Migrado com sucesso: ${file}`);
                successCount++;
            }
            catch (error) {
                console.error(`‚ùå Erro ao migrar ${file}:`, error);
                errorCount++;
            }
        }
        console.log('\nüìä Resumo da migra√ß√£o:');
        console.log(`‚úÖ Arquivos migrados com sucesso: ${successCount}`);
        console.log(`‚ùå Arquivos com erro: ${errorCount}`);
        console.log(`üìÅ Total de arquivos processados: ${filesToEncrypt.length}`);
        if (errorCount === 0) {
            console.log('\nüéâ Migra√ß√£o conclu√≠da com sucesso!');
        }
        else {
            console.log('\n‚ö†Ô∏è  Migra√ß√£o conclu√≠da com alguns erros. Verifique os logs acima.');
        }
    }
    catch (error) {
        console.error('‚ùå Erro fatal durante a migra√ß√£o:', error);
        process.exit(1);
    }
}
// Executar migra√ß√£o se o script for chamado diretamente
if (require.main === module) {
    migrateExistingFiles();
}
//# sourceMappingURL=migrateFiles.js.map